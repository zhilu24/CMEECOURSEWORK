import requests
import pandas as pd
import time
import getpass
from bacdive import BacdiveClient
from collections import Counter
from pathlib import Path
import subprocess
import argparse
import logging
from fna2protcombined import run_all
import pyrodigal

  
def run_taxid2fna(taxid_list, script_path="/Users/zhangzhilu/Desktop/finalproject_2/temperature_and_ph/code/run_taxid2fna.sh"):
    """
    Run `run_taxid2fna.sh` passing each TaxID in `taxid_list` as a separate CLI argument.

    Parameters
    ----------
    taxid_list : list of int or str
        List of NCBI TaxIDs to pass to the script.
    script_path : str or Path, optional
        Path to the shell script (default is user-specific path).

    Raises
    ------
    FileNotFoundError
        If the script is not found at `script_path`.
    ValueError
        If taxid_list is empty or None.
    subprocess.CalledProcessError
        If the script exits with a non-zero status.
    """
    script_path = Path(script_path).expanduser().resolve()

    if not script_path.is_file():
        raise FileNotFoundError(f"Script not found: {script_path}")

    if not taxid_list:
        raise ValueError("No TaxIDs supplied.")

    taxid_args = [str(tid) for tid in taxid_list if tid is not None]

    if not taxid_args:
        raise ValueError("No valid TaxIDs after filtering None.")

    cmd = f"PATH=/usr/local/bin:$PATH bash {script_path} " + " ".join(taxid_args)
    print("Running:", cmd)

    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    print("STDOUT:\n", result.stdout)
    print("STDERR:\n", result.stderr)

    if result.returncode != 0:
        raise subprocess.CalledProcessError(result.returncode, cmd, result.stdout, result.stderr)



def run_protein_prediction(fasta_dir_path,
                           evalue="1e-3", 
                           nproc=4,
                           taxids=None):
    """
    Run protein prediction on all .fna files in the specified directory.
    If taxids is provided, only process files whose basename starts with any of those taxids (before the first '_').

    Parameters
    ----------
    fasta_dir_path : str or Path
        Path to the directory containing .fna files.
    evalue : str, optional
        E-value threshold for run_all (default "1e-3").
    nproc : int, optional
        Number of processors to use (default 4).
    taxids : set, list, or None
        Taxids to filter for in filenames (default None = process all files)

    Returns
    -------
    list of Path
        List of output files generated by run_all.
    """
    fasta_dir = Path(fasta_dir_path).expanduser().resolve()
    fna_files = sorted(fasta_dir.glob("*.fna"))

    if not fna_files:
        logging.warning(f"No .fna files found in {fasta_dir}")
        return []

    # If filtering by taxids, select only those files where the filename starts with taxid
    if taxids is not None:
        taxids = set(str(tid) for tid in taxids)
        filtered_files = []
        for f in fna_files:
            filename = f.name
            # Extract the leading number (taxid) before the first underscore
            leading = filename.split('_', 1)[0]
            if leading in taxids:
                filtered_files.append(f)
        fna_files = filtered_files
        if not fna_files:
            logging.warning(f"No .fna files match provided taxids in {fasta_dir}")
            return []

    logging.info(f"Starting prediction on {len(fna_files)} files with {nproc} processes.")
    results = run_all(fna_files, evalue, nproc=nproc)

    logging.info("Protein prediction output files:")
    for r in results:
        logging.info(r)
    return results



def translate_all_fna(input_dir, output_dir, min_score=99.9):
    input_dir = Path(input_dir)
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    # 初始化 gene finder，使用meta模式，设置高置信度阈值
    gene_finder = pyrodigal.GeneFinder(meta=True, min_gene_score=min_score)

    for fna_file in input_dir.glob("*.fna"):
        print(f"🔍 Processing {fna_file.name}")
        record = next(SeqIO.parse(fna_file, "fasta"))

        # 运行基因预测
        genes = gene_finder.find_genes(str(record.seq))

        # 写入 protein sequences 到 .faa 文件
        output_faa = output_dir / f"{fna_file.stem}_proteins.faa"
        with open(output_faa, "w") as out_f:
            for i, gene in enumerate(genes, 1):
                protein_seq = gene.translation
                out_f.write(f">gene{i}_{fna_file.stem}\n{protein_seq}\n")

        print(f"✅ Saved {len(genes)} proteins to {output_faa.name}")